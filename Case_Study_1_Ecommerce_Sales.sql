/*SQL Data Analysis Practice Task: E-Commerce Sales Analysis
Background:
You are an analyst at an e-commerce company. 
Your manager has provided you with three
 tables containing sales data and asked you to analyze it.*/


/* database creation*/

CREATE TABLE Customers(
    customer_id INT UNIQUE PRIMARY KEY AUTO_INCREMENT,
    full_name VARCHAR(20),
    email VARCHAR(30) UNIQUE,
    country VARCHAR(20),
    registration_date DATE
);

CREATE TABLE Orders(
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY(customer_id) REFERENCES Customers(customer_id) ON DELETE SET NULL
);

CREATE TABLE Products(
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    product_name VARCHAR(20),
    category VARCHAR(20),
    price DECIMAL(10, 2)
);

CREATE TABLE Order_details(
    order_detail_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY(order_id) REFERENCES Orders(order_id) ON DELETE SET NULL,
    FOREIGN KEY(product_id) REFERENCES Products(product_id) ON DELETE SET NULL
);
/* Data inserion */
-- Insert into Customers
INSERT INTO Customers (full_name, email, country, registration_date)
VALUES
('Sophia Miller', 'sophia.miller@example.com', 'USA', '2022-11-10'),
('Liam Johnson', 'liam.johnson@example.com', 'Canada', '2023-01-05'),
('Olivia Brown', 'olivia.brown@example.com', 'UK', '2023-02-14'),
('Noah Davis', 'noah.davis@example.com', 'Germany', '2023-03-10'),
('Emma Wilson', 'emma.wilson@example.com', 'France', '2023-04-22'),
('James Taylor', 'james.taylor@example.com', 'Australia', '2023-05-01'),
('Ava Martinez', 'ava.martinez@example.com', 'Spain', '2023-06-12'),
('William Garcia', 'william.garcia@example.com', 'Mexico', '2023-07-03');

-- Insert into Products
INSERT INTO Products (product_name, category, price)
VALUES
('Laptop', 'Electronics', 1200),
('Smartphone', 'Electronics', 800),
('Tablet', 'Electronics', 600),
('Headphones', 'Accessories', 150),
('Smartwatch', 'Accessories', 200),
('Office Chair', 'Furniture', 300),
('Desk', 'Furniture', 450),
('Bookshelf', 'Furniture', 500),
('Printer', 'Office Supplies', 250),
('Notebook', 'Office Supplies', 20);

-- Insert into Orders
INSERT INTO Orders (customer_id, order_date, total_amount)
VALUES
(1, '2023-06-01', 1500),
(1, '2023-06-20', 450),
(2, '2023-07-05', 800),
(3, '2023-07-10', 1050),
(4, '2023-08-01', 250),
(5, '2023-08-12', 1700),
(6, '2023-09-01', 300),
(7, '2023-09-15', 900),
(8, '2023-09-20', 1800),
(3, '2023-10-01', 1200);

-- Insert into Order_details
INSERT INTO Order_details (order_id, product_id, quantity)
VALUES
(1, 1, 1),  -- Order 1: Laptop
(1, 4, 2),  -- Order 1: Headphones
(2, 7, 1),  -- Order 2: Desk
(3, 2, 1),  -- Order 3: Smartphone
(4, 3, 1),  -- Order 4: Tablet
(4, 4, 3),  -- Order 4: Headphones
(5, 9, 1),  -- Order 5: Printer
(6, 1, 1),  -- Order 6: Laptop
(6, 5, 2),  -- Order 6: Smartwatch
(7, 6, 1),  -- Order 7: Office Chair
(8, 2, 1),  -- Order 8: Smartphone
(8, 3, 1),  -- Order 8: Tablet
(8, 4, 4),  -- Order 8: Headphones
(9, 1, 1),  -- Order 9: Laptop
(9, 8, 1),  -- Order 9: Bookshelf
(10, 1, 1), -- Order 10: Laptop
(10, 10, 10); -- Order 10: Notebook

/* Retrieve all orders along with customer details.*/
select O.order_id ,
O.order_date, 
o.total_amount ,
C.full_name 
from Orders O join Customers C 
on O.customer_id = C.customer_id;


/* List all orders with product details included*/
select D.order_id, 
P.product_name , 
P.category,P.price 
from Order_details D 
join Products P on D.order_id = P.product_id;



/*Show the total sales amount for each customer.*/
select O.customer_id,
C.full_name,SUM(O.total_amount) as Total_sales 
 from Orders O join Customers C on O.customer_id = C.customer_id 
 group by C.customer_id,C.full_name;


/* Identify the top 2 customers who spent the most */
select O.customer_id,
C.full_name,SUM(O.total_amount) as Total_sales  
from Orders O join Customers C on O.customer_id = C.customer_id
 group by C.customer_id,C.full_name order by Total_sales DESC limit 2;


/* Find the most popular product (the product that appears most in orders)*/
SELECT P.product_id, 
P.product_name, 
COUNT(O.product_id) AS total_sales
FROM Products P
INNER JOIN Order_details O ON P.product_id = O.product_id
GROUP BY P.product_id, P.product_name
ORDER BY total_sales DESC
LIMIT 1;



/* Calculate the revenue generated by each product category.*/
select P.category,
 Sum( P.price * O.quantity ) as revenu 
from products P inner join Order_details O On P.product_id = O.product_id group by P.category;


/* Calculate the revenue generated by each product category. the number of products sold within each category*/
SELECT P.category, 
       SUM(P.price * O.quantity) AS revenue,
       COUNT(O.product_id) AS total_products_sold
FROM Products P
INNER JOIN Order_details O ON P.product_id = O.product_id
GROUP BY P.category;



/* total orders per customers */
select C.full_name , 
O.customer_id ,count(O.order_id) as total_orders 
from Customers C inner join Orders O on C.customer_id = O.customer_id 
group by C.customer_id;


/*Find customers who have never placed an order. */
SELECT 
    C.customer_id, 
    C.full_name 
FROM Customers C 
LEFT JOIN Orders O ON C.customer_id = O.customer_id 
WHERE O.order_id IS NULL;


/*Show monthly revenue,and montally total orders*/
SELECT month(order_date) as order_month ,
year(order_date) as order_year,
Count(*) as total_orders,
SUM(total_amount) as  monthlyrevenue
FROM orders group by order_month,order_year;


/*Retrieve the total orders per product .*/
select P.product_id,
P.product_name,P.category , 
count(O.product_id) as total_orders 
from products P inner join order_details O 
ON P.product_id = O.product_id  group by  P.product_id ;